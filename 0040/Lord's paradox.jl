# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     formats: ipynb,jl:hydrogen
#     text_representation:
#       extension: .jl
#       format_name: hydrogen
#       format_version: '1.3'
#       jupytext_version: 1.10.3
#   kernelspec:
#     display_name: Julia 1.9.0-beta3
#     language: julia
#     name: julia-1.9
# ---

# %% [markdown]
# # Lord's paradox„Å´„Å§„ÅÑ„Å¶
#
# * ÈªíÊú®ÁéÑ
# * 2023-01-22
#
# __References__
#
# * https://twitter.com/yudapearl/status/1616051192685277184
# * https://en.wikipedia.org/wiki/Lord%27s_paradox

# %% [markdown]
# ## Ê∫ñÂÇô
#
# <!-- ![IMG_8086.jpg](attachment:baeb4c6d-6ae5-4268-9d70-e69138504ec9.jpg) -->
# <img src="attachment:baeb4c6d-6ae5-4268-9d70-e69138504ec9.jpg" width=80%>

# %% [markdown]
# ## 2Á®ÆÈ°û„ÅÆÂõ†Êûú„É¢„Éá„É´„Å´ÂØæÂøú„Åô„ÇãÁ¢∫ÁéáÂàÜÂ∏É„ÅÆË°®Á§∫
#
# $w\in{1,0}$, $x,y\in\mathbb{R}$ „Å´Èñ¢„Åô„ÇãÂêåÊôÇÁ¢∫ÁéáÂàÜÂ∏É„ÇíÊ¨°„ÅÆ„Çà„ÅÜ„Å´ÂÆö„ÇÅ„Çã:
#
# $$
# \begin{aligned}
# p(x,y,w) = p(x,y|w)p(w).
# \end{aligned}
# $$
#
# „Åì„Åì„Åß,
#
# $$
# \begin{aligned}
# &
# p(w) \sim \operatorname{Bernoulli}(\theta),
# \\ &
# p(x,y|w) \sim \operatorname{MvNormal}\left(
# \begin{bmatrix}
# \mu_{w,x} \\ \mu_{w,y} \\
# \end{bmatrix},
# \begin{bmatrix}
# \sigma_{w,x}^2 & \sigma_{w,xy}  \\
# \sigma_{w,xy}  & \sigma_{w,y}^2 \\
# \end{bmatrix}.
# \right)
# \end{aligned}
# $$
#
# „Åì„ÅÆ„Å®„Åç, $p(y|x,w)$ „Å® $p(w|x)$, $p(x)$ „ÇíÊ±Ç„ÇÅ„Çà„ÅÜ. 
#
# $$
# \begin{aligned}
# p(x|w) \sim \operatorname{Normal}(\mu_{w,x}, \sigma_{w,X}^2)
# \end{aligned}
# $$
#
# „Å™„ÅÆ„Åß, 
#
# $$
# p(x) \sim \operatorname{MixtureModel}(
# [\operatorname{Normal}((\mu_{1,x}, \sigma_{1,X}^2), \operatorname{Normal}((\mu_{0,x}, \sigma_{0,X}^2)]
# [1/2, 1/2]
# )
# $$
#
# „Åô„Å™„Çè„Å°,
#
# $$
# p(x) = p(x|w=1)p(w=1) + p(x|w=0)p(w=0) = \theta p(x|w=1) + (1-\theta) p(x|w=0).
# $$
#
# „ÇÜ„Åà„Å´,
#
# $$
# p(w|x) = \frac{p(x|w)p(w)}{p(x)} = \begin{cases}
# \dfrac{\theta p(x|w=1)}{\theta p(x|w=1) + (1-\theta) p(x|w=0)} & (w=1), \\
# \dfrac{(1-\theta) p(x|w=0)}{\theta p(x|w=1) + (1-\theta) p(x|w=0)} & (w=0). \\
# \end{cases}
# $$
#
# ‰∏ä„ÅÆ„Çª„É´„Å´ÂºïÁî®„Åó„ÅüÊâãÊõ∏„Åç„ÅÆ„Éé„Éº„Éà„ÅÆÁµêÊûú„Çà„Çä,
#
# $$
# p(y|x,w) \sim \operatorname{Normal}(\beta_{w,0} + \beta_{w,1} x,\; \sigma_w^2).
# $$
#
# „Åì„Åì„Åß,
#
# $$
# \beta_{w,1} = \frac{\sigma_{w,xy}}{\sigma_{w,x}^2}, \quad
# \beta_{w,0} = \mu_{w,y} - \beta_{w,1}\mu_{w,x}, \quad
# \sigma_w^2 = \frac{\sigma_{w,x}^2\sigma_{w,y}^2 - \sigma_{w,xy}^2}{\sigma_{w,x}^2}.
# $$
#
# ‰ª•‰∏ä„Çà„Çä, ÂêåÊôÇÁ¢∫ÁéáÂàÜÂ∏É $p(x,y,w)$ „ÅÆ2„Å§„ÅÆË°®Á§∫„ÅåÂæó„Çâ„Çå„Åü:
#
# $$
# p(x,y,w) = p(y|x,w)p(x|w)p(w) = p(y|x,w)p(w|x)p(x).
# $$
#
# „Åì„ÅÆ2„Å§„ÅÆË°®Á§∫„ÅØÂêå„ÅòÂêåÊôÇÁ¢∫ÁéáÂàÜÂ∏É„ÇíÂÆö„ÇÅ„Çã„Åå, Áµ±Ë®àÁöÑÂõ†Êûú„É¢„Éá„É´„Å®„Åó„Å¶„ÅØ‰∫í„ÅÑ„Å´Áï∞„Å™„Çã„Å®„Åø„Å™„Åï„Çå„Çã:
#
# $$
# \begin{array}{ccc}
# \begin{array}{ccc}
#   & & X & & \\
#   & \nearrow & & \searrow & \\ 
# W & \to & \to & \to & Y \\
# \end{array}
# &
# \qquad
# \qquad
# \qquad
# &
# \begin{array}{ccc}
#   & & X & & \\
#   & \swarrow & & \searrow & \\ 
# W & \to & \to & \to & Y \\
# \end{array}
# \\
# ùëù(ùë¶|ùë•,ùë§)ùëù(ùë•|ùë§)ùëù(ùë§)
# & &
# ùëù(ùë¶|ùë•,ùë§)ùëù(ùë§|ùë•)ùëù(ùë•).
# \end{array}
# $$
#
# ÂâçËÄÖ„ÅÆÂ†¥Âêà„Å´„ÅØ, $W$ „ÅÆ $Y$ „Å∏„ÅÆÂäπÊûú„ÇíË™ø„Åπ„Çã„Åü„ÇÅ„Å´ $X$ „ÅßÊù°‰ª∂‰ªò„Åë„Å¶„ÅØ„ÅÑ„Åë„Å™„ÅÑ. „Åô„Å™„Çè„Å°, $Y$ „ÅÆ $X$ „Å´„Çà„ÇãÂõûÂ∏∞„ÇíË¶ã„Å¶„ÅØ„ÅÑ„Åë„Å™„ÅÑ.
#
# ÂæåËÄÖ„ÅÆÂ†¥Âêà„Å´„ÅØ, $W$ „ÅÆ $Y$ „Å∏„ÅÆÂäπÊûú„ÇíË™ø„Åπ„Çã„Å®„Åç„Å´, $X$ „ÅØ‰∫§Áµ°Âõ†Â≠ê„Å´„Å™„Çã„ÅÆ„Åß, $X$ „ÅßÊù°‰ª∂‰ªò„Åë„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã.  „Åô„Å™„Çè„Å°, $Y$ „ÅÆ $X$ „Å´„Çà„ÇãÂõûÂ∏∞„ÇíË¶ã„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã.

# %% [markdown]
# ## Lord„ÅÆ„Éë„É©„Éâ„ÉÉ„ÇØ„Çπ„ÅÆÁ¢∫ÁéáÂàÜÂ∏É
#
# ÂâçÁØÄ„ÅÆÂàÜÂ∏É„Åß $\mu_{w,y}=\mu_{w,x}$ ($w=1,0$)„ÅÆÂ†¥Âêà„ÅåLord„ÅÆ„Éë„É©„Éâ„ÉÉ„ÇØ„Çπ„Åß‰Ωø„Çè„Çå„Å¶„ÅÑ„Çã„É¢„Éá„É´„Å†„Å®„Åø„Å™„Åï„Çå„Çã.
#
# $\mu_{1,y}=\mu_{1,x}=55$, $\mu_{0,y}=\mu_{1,x}=70$, $\sigma_{w,x}^2 = \sigma_{w,y}^2 = 10^2 = 100$, $\sigma_{w,xy}=50$ ($w=1,0$), $\theta=1/2$ „ÅÆÂ†¥Âêà„Å´2ÈÄö„Çä„ÅÆÊñπÊ≥ï„Åß„Çµ„É≥„Éó„É´„ÇíÁîüÊàê„Åó„Å¶„Åø„Çã.

# %%
using Distributions
using LinearAlgebra
dot2(x) = LinearAlgebra.dot(x, x)
using StatsPlots
default(fmt=:png, guidefontsize=8, titlefontsize=10, tickfontsize=6)

# %%
Œº‚ÇÅx::Float64 = 55
Œº‚ÇÅy::Float64 = 55
Œº‚ÇÄx::Float64 = 70
Œº‚ÇÄy::Float64 = 70
œÉ‚ÇÅx¬≤::Float64 = 100
œÉ‚ÇÅy¬≤::Float64 = 100
œÉ‚ÇÄx¬≤::Float64 = 100
œÉ‚ÇÄy¬≤::Float64 = 100
œÉ‚ÇÅxy::Float64 = 50
œÉ‚ÇÄxy::Float64 = 50

@show Œ≤‚ÇÅ‚ÇÅ::Float64 = œÉ‚ÇÅxy/œÉ‚ÇÅx¬≤
@show Œ≤‚ÇÄ‚ÇÅ::Float64 = œÉ‚ÇÄxy/œÉ‚ÇÄx¬≤
@show Œ≤‚ÇÅ‚ÇÄ::Float64 = Œº‚ÇÅy - Œ≤‚ÇÅ‚ÇÅ*Œº‚ÇÅx
@show Œ≤‚ÇÄ‚ÇÄ::Float64 = Œº‚ÇÄy - Œ≤‚ÇÄ‚ÇÅ*Œº‚ÇÄx
@show œÉ‚ÇÅ¬≤::Float64 = (œÉ‚ÇÅx¬≤*œÉ‚ÇÅy¬≤ - œÉ‚ÇÅxy^2)/œÉ‚ÇÅx¬≤
@show œÉ‚ÇÄ¬≤::Float64 = (œÉ‚ÇÄx¬≤*œÉ‚ÇÄy¬≤ - œÉ‚ÇÄxy^2)/œÉ‚ÇÄx¬≤
println()
@show Œ∏::Float64 = 1/2

distw() = Bernoulli(Œ∏)
distx(w) = w == 1 ? Normal(Œº‚ÇÅx, ‚àöœÉ‚ÇÅ¬≤) : Normal(Œº‚ÇÄx, ‚àöœÉ‚ÇÄ¬≤)
distx() = MixtureModel([distx(1), distx(0)], [Œ∏, 1-Œ∏])
distw(x) = Bernoulli(pdf(distx(1), x)*pdf(distw(), 1)/pdf(distx(), x))
disty(x, w) = w == 1 ? Normal(Œ≤‚ÇÅ‚ÇÄ+Œ≤‚ÇÅ‚ÇÅ*x, ‚àöœÉ‚ÇÅ¬≤) : Normal(Œ≤‚ÇÄ‚ÇÄ+Œ≤‚ÇÄ‚ÇÅ*x, ‚àöœÉ‚ÇÄ¬≤)
distxy(w) = if w == 1
    MvNormal([Œº‚ÇÅx, Œº‚ÇÅy], [œÉ‚ÇÅx¬≤ œÉ‚ÇÅxy; œÉ‚ÇÅxy œÉ‚ÇÅy¬≤])
else
    MvNormal([Œº‚ÇÄx, Œº‚ÇÄy], [œÉ‚ÇÄx¬≤ œÉ‚ÇÄxy; œÉ‚ÇÄxy œÉ‚ÇÄy¬≤])
end
distxy() = MixtureModel([distxy(1), distxy(0)], [Œ∏, 1-Œ∏])

println()
@show distw()
println()
@show distx()
println()
@show distxy();

# %%
function plot_data(XYW; ms=1, alpha=0.3, xlim=(10, 110), ylim=(10, 110), kwargs...)
    X1 = [x for (x,y,w) in XYW if w==1]
    Y1 = [y for (x,y,w) in XYW if w==1]
    X0 = [x for (x,y,w) in XYW if w==0]
    Y0 = [y for (x,y,w) in XYW if w==0]
    @show mean(X1), mean(Y1)
    @show mean(X0), mean(Y0)
    @show length(X1)/length(XYW)
    
    P1 = scatter(X1, Y1; label="w=1", c=1, msc=:auto, ms, alpha, xlim, ylim)
    plot!(collect(xlim), collect(xlim); label="", c=:black, ls=:dot, alpha=0.5)
    plot!(collect(xlim), x->Œ≤‚ÇÅ‚ÇÄ+Œ≤‚ÇÅ‚ÇÅ*x; label="", c=:blue)
    plot!(xguide="x", yguide="y")
    
    P0 = scatter(X0, Y0; label="w=0", c=2, msc=:auto, ms, alpha, xlim, ylim)
    plot!(collect(xlim), collect(xlim); label="", c=:black, ls=:dot, alpha=0.5)
    plot!(collect(xlim), x->Œ≤‚ÇÄ‚ÇÄ+Œ≤‚ÇÄ‚ÇÅ*x; label="", c=:red)
    plot!(xguide="x", yguide="y")
    
    plot(P1, P0; size=(600, 300), layout=(1, 2))
    plot!(; kwargs...)
end

# %%
n = 10000

XYW1 = [(w = rand(distw()); (x, y) = rand(distxy(w)); (x, y, w)) for _ in 1:n]
P1 = plot_data(XYW1)

XYW2 = [(w = rand(distw()); x = rand(distx(w)); (x, rand(disty(x, w)), w)) for _ in 1:n]
P2 = plot_data(XYW2)

XYW3 = [(x = rand(distx()); w = rand(distw(x)); (x, rand(disty(x, w)), w)) for _ in 1:n]
P3 = plot_data(XYW3)

plot(P1, P2, P3; size=(600, 900), layout=(3, 1))

# %%
function plot_data2(XYW; ms=1, alpha=0.3, xlim=(10, 110), ylim=(10, 110), kwargs...)
    X1 = [x for (x,y,w) in XYW if w==1]
    Y1 = [y for (x,y,w) in XYW if w==1]
    X0 = [x for (x,y,w) in XYW if w==0]
    Y0 = [y for (x,y,w) in XYW if w==0]
    @show mean(X1), mean(Y1)
    @show mean(X0), mean(Y0)
    @show length(X1)/length(XYW)
    
    plot()
    scatter!(X1, Y1; label="w=1", c=1, msc=:auto, ms, alpha, xlim, ylim)
    plot!(collect(xlim), collect(xlim); label="", c=:black, ls=:dot, alpha=0.5)
    plot!(collect(xlim), x->Œ≤‚ÇÅ‚ÇÄ+Œ≤‚ÇÅ‚ÇÅ*x; label="", c=:blue)
    plot!(xguide="x", yguide="y")
    scatter!(X0, Y0; label="w=0", c=2, msc=:auto, ms, alpha, xlim, ylim)
    plot!(collect(xlim), collect(xlim); label="", c=:black, ls=:dot, alpha=0.5)
    plot!(collect(xlim), x->Œ≤‚ÇÄ‚ÇÄ+Œ≤‚ÇÄ‚ÇÅ*x; label="", c=:red)
    plot!(xguide="x", yguide="y")
end

# %%
n = 10000

XYW1 = [(w = rand(distw()); (x, y) = rand(distxy(w)); (x, y, w)) for _ in 1:n]
P1 = plot_data2(XYW1)

XYW2 = [(w = rand(distw()); x = rand(distx(w)); (x, rand(disty(x, w)), w)) for _ in 1:n]
P2 = plot_data2(XYW2)

XYW3 = [(x = rand(distx()); w = rand(distw(x)); (x, rand(disty(x, w)), w)) for _ in 1:n]
P3 = plot_data2(XYW3)

plot(P1, P2, P3; size=(900, 300), layout=(1, 3))
plot!(leftmargin=4Plots.mm, bottommargin=4Plots.mm)

# %%
